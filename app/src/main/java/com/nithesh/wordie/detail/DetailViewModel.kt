package com.nithesh.wordie.detail

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase
import com.nithesh.wordie.network.Word

class DetailViewModel(private val resultWord: Word) : ViewModel() {
    private val TAG = DetailViewModel::class.java.simpleName
    private var database: FirebaseDatabase
    private val reference: DatabaseReference


    private val _word = MutableLiveData<Word>()
    val word: LiveData<Word>
        get() = _word

    init {
        _word.value = resultWord
        database = FirebaseDatabase.getInstance("https://test-2a2a2-default-rtdb.firebaseio.com/")
        reference = database.getReference("word-test").child("nithesh")

    }

    fun saveWord() {
        Log.i(TAG, "saveWord: saving the word in real time database")
        val autogenerated = reference.push().key
        val task = reference.child(resultWord.meta!!.uuid ?: "$autogenerated").setValue(resultWord)
        task.addOnCompleteListener {
            if (it.isSuccessful) {
                Log.i(TAG, "saveWord: ${resultWord.hwi?.hw} is successfully saved")
            }
            if (it.isComplete) {
                Log.i(TAG, "saveWord: ${resultWord.hwi?.hw} is complete")
            }
            if (it.isCanceled) {
                Log.i(TAG, "saveWord: ${resultWord.hwi!!.hw} is canceled ")
            }
        }
    }

}

class DetailViewModelFactory(private val word: Word) : ViewModelProvider.NewInstanceFactory() {
    override fun <T : ViewModel?> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(DetailViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return DetailViewModel(word) as T
        }
        throw ClassCastException("Cannot create viewModel for this class")
    }
}